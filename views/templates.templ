package views

import "linn221/Requester/requests"
import "strconv"

templ HomePage() {
	<!doctype html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>HTMX Navbar</title>
			<!-- Bootstrap 5 CDN -->
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
			<style>
				.request-card {
					transition: all 0.2s ease-in-out;
					border: 1px solid #dee2e6;
				}
				.request-card:hover {
					transform: translateY(-2px);
					box-shadow: 0 4px 8px rgba(0,0,0,0.1);
					border-color: #007bff;
				}
				pre {
					background-color: #f8f9fa;
					border: 1px solid #e9ecef;
					border-radius: 0.375rem;
					padding: 1rem;
				}
				[x-cloak] {
					display: none !important;
				}
			</style>
		</head>
		<body hx-target="#main" hx-swap="innerHTML">
			<nav class="navbar navbar-expand-lg bg-light border-bottom">
				<div class="container-fluid">
					<span class="navbar-brand">App</span>
					<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
						<span class="navbar-toggler-icon"></span>
					</button>
					<div class="collapse navbar-collapse" id="navbarNav">
						<div class="navbar-nav">
							<button class="btn nav-link" type="button" hx-get="/dashboard/">Home</button>
							<button class="btn nav-link" type="button" hx-get="/dashboard/import">Import File</button>
							<button class="btn nav-link" type="button" hx-get="/dashboard/jobs">Jobs</button>
							<button class="btn nav-link" type="button" hx-get="/dashboard/requests">Requests</button>
							<button class="btn nav-link text-danger" type="button" hx-post="/logout" hx-target="body">Quit</button>
						</div>
					</div>
				</div>
			</nav>
			<div id="main" class="container">
				<div id="flash"></div>
			</div>
			<!-- Bootstrap JS (for responsive toggle) -->
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
		</body>
	</html>
}

templ ImportForm() {
	<form hx-post="/dashboard/import" enctype="multipart/form-data">
		<div class="mb-3">
			<label for="harfile" class="form-label">HAR File</label>
			<input type="file" name="harfile" class="form-control" id="harfile" accept=".har" required/>
		</div>
		<div class="mb-3">
			<label for="title" class="form-label">Title</label>
			<input type="text" name="title" id="title" class="form-control" required/>
		</div>
		<div class="mb-3">
			<label for="ignoredHeaders" class="form-label">Ignored Headers (one per line)</label>
			<textarea name="ignoredHeaders" id="ignoredHeaders" class="form-control" rows="3" placeholder="date&#10;content-length&#10;server"></textarea>
			<small class="form-text text-muted">Enter header names to ignore when processing the HAR file, one per line</small>
		</div>
		<button class="btn btn-primary" type="submit">Upload and Process</button>
	</form>
}

templ JobStatus(data JobStatusData) {
	if data.InProgress {
		<div hx-trigger="every 3s" hx-get={ "/job-status/" + data.Id }>
			Percentage: { data.Percentage }
		</div>
	}
	if data.Success {
		<div>Success</div>
	}
}

templ ErrorBox(message string) {
	<div class="alert alert-danger alert-dismissible fade show" role="alert" id="flash">
		<strong>Error:</strong> { message }
		<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
	</div>
}

templ ImportResult(title string, totalRequests int, uniqueDomains int, summary string, importJobId uint) {
	<div class="alert alert-success">
		<h5 class="alert-heading">Import Successful!</h5>
		<p><strong>Title:</strong> { title }</p>
		<p><strong>Total Requests:</strong> { totalRequests }</p>
		<p><strong>Unique Domains:</strong> { uniqueDomains }</p>
		<hr/>
		<p class="mb-0"><strong>Summary:</strong></p>
		<pre class="mt-2">{ summary }</pre>
		<hr/>
		<div class="d-flex gap-2">
			<a href={ "/dashboard/requests/" + strconv.FormatUint(uint64(importJobId), 10) } class="btn btn-primary">
				<i class="bi bi-list-ul"></i> View Requests
			</a>
			<button class="btn btn-outline-secondary" onclick="history.back()">
				<i class="bi bi-arrow-left"></i> Back to Import
			</button>
		</div>
	</div>
}

type JobStatusData struct {
	InProgress bool
	Success    bool
	Id         string
	Percentage int
}

templ RequestsList(requests []requests.MyRequest) {
	<div class="container-fluid">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h2>Requests</h2>
					<span class="badge bg-secondary">{ len(requests) } requests</span>
				</div>
			</div>
		</div>
		
		<div class="row">
			<template for _, request := range requests {
				<div class="col-12 mb-3">
					<div class="card request-card" onclick="window.location.href='/dashboard/requests/detail/{ request.ID }'" style="cursor: pointer;">
						<div class="card-body">
							<div class="row align-items-center">
								<div class="col-md-6">
									<div class="d-flex align-items-center mb-2">
										<span class="badge me-2 bg-primary">{ request.Method }</span>
										<span class="text-truncate fw-bold">{ request.URL }</span>
									</div>
									<div class="text-muted small">{ request.Domain }</div>
								</div>
								<div class="col-md-6">
									<div class="row text-center">
										<div class="col-4">
											<div class="small text-muted">Status</div>
											<span class="badge bg-success">{ request.ResStatus }</span>
										</div>
										<div class="col-4">
											<div class="small text-muted">Size</div>
											<div class="fw-bold">{ request.RespSize } bytes</div>
										</div>
										<div class="col-4">
											<div class="small text-muted">Latency</div>
											<div class="fw-bold">{ request.LatencyMs }ms</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
} requests</span>
				</div>
			</div>
		</div>
		
		<div class="row">
			<template for _, request := range requests {
				<div class="col-12 mb-3">
					<div class="card request-card" onclick="window.location.href="/dashboard/requests/detail/{ request.ID }"" style="cursor: pointer;">
						<div class="card-body">
							<div class="row align-items-center">
								<div class="col-md-6">
									<div class="d-flex align-items-center mb-2">
										<span class="badge me-2" class={ getMethodBadgeClass(request.Method) }>{ request.Method }</span>
										<span class="text-truncate fw-bold">{ request.URL }</span>
									</div>
									<div class="text-muted small">{ request.Domain }</div>
								</div>
								<div class="col-md-6">
									<div class="row text-center">
										<div class="col-4">
											<div class="small text-muted">Status</div>
											<span class="badge" class={ getStatusBadgeClass(request.ResStatus) }>{ request.ResStatus }</span>
										</div>
										<div class="col-4">
											<div class="small text-muted">Size</div>
											<div class="fw-bold">{ formatBytes(request.RespSize) }</div>
										</div>
										<div class="col-4">
											<div class="small text-muted">Latency</div>
											<div class="fw-bold">{ request.LatencyMs }ms</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}
templ RequestDetail(request requests.MyRequest) {
	<div x-data="requestDetail()" class="container-fluid">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center">
					<div>
						<button class="btn btn-outline-secondary btn-sm me-2" onclick="history.back()">
							<i class="bi bi-arrow-left"></i> Back
						</button>
						<h2 class="d-inline">Request Details</h2>
					</div>
					<div>
						<button class="btn btn-outline-primary btn-sm me-2" @click="copyAsCurl()">
							<i class="bi bi-clipboard"></i> Copy as cURL
						</button>
						<button class="btn btn-outline-secondary btn-sm me-2" @click="openInVSCode()">
							<i class="bi bi-code-square"></i> Open in VS Code
						</button>
						<button class="btn btn-primary btn-sm" @click="showNotesForm = !showNotesForm">
							<i class="bi bi-plus-circle"></i> Add Notes
						</button>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Notes Form -->
		<div x-show="showNotesForm" class="row mb-4" x-transition>
			<div class="col-12">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Add Notes</h5>
					</div>
					<div class="card-body">
						<form @submit.prevent="addNote()">
							<div class="mb-3">
								<label for="noteTitle" class="form-label">Title</label>
								<input type="text" class="form-control" id="noteTitle" x-model="noteForm.title" required>
							</div>
							<div class="mb-3">
								<label for="noteContent" class="form-label">Content</label>
								<textarea class="form-control" id="noteContent" rows="4" x-model="noteForm.content" required></textarea>
							</div>
							<div class="d-flex gap-2">
								<button type="submit" class="btn btn-primary">Save Note</button>
								<button type="button" class="btn btn-secondary" @click="showNotesForm = false">Cancel</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row">
			<!-- Request Information -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Request Information</h5>
					</div>
					<div class="card-body">
						<div class="row mb-3">
							<div class="col-4"><strong>Method:</strong></div>
							<div class="col-8">
								<span class="badge" :class="getMethodBadgeClass(request.Method)" x-text="request.Method"></span>
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>URL:</strong></div>
							<div class="col-8">
								<code class="text-break" x-text="request.URL"></code>
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Domain:</strong></div>
							<div class="col-8" x-text="request.Domain"></div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Sequence:</strong></div>
							<div class="col-8" x-text="request.Sequence"></div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Request Time:</strong></div>
							<div class="col-8" x-text="request.RequestTime"></div>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Response Information -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Response Information</h5>
					</div>
					<div class="card-body">
						<div class="row mb-3">
							<div class="col-4"><strong>Status:</strong></div>
							<div class="col-8">
								<span class="badge" :class="getStatusBadgeClass(request.ResStatus)" x-text="request.ResStatus"></span>
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Size:</strong></div>
							<div class="col-8" x-text="formatBytes(request.RespSize)"></div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Latency:</strong></div>
							<div class="col-8" x-text="request.LatencyMs + 'ms'"></div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Created:</strong></div>
							<div class="col-8" x-text="formatDate(request.CreatedAt)"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row">
			<!-- Request Headers -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Request Headers</h5>
						<button class="btn btn-sm btn-outline-secondary" @click="copyToClipboard(request.ReqHeaders)">
							<i class="bi bi-clipboard"></i>
						</button>
					</div>
					<div class="card-body">
						<pre class="small mb-0" style="max-height: 300px; overflow-y: auto;" x-text="request.ReqHeaders"></pre>
					</div>
				</div>
			</div>
			
			<!-- Response Headers -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Response Headers</h5>
						<button class="btn btn-sm btn-outline-secondary" @click="copyToClipboard(request.ResHeaders)">
							<i class="bi bi-clipboard"></i>
						</button>
					</div>
					<div class="card-body">
						<pre class="small mb-0" style="max-height: 300px; overflow-y: auto;" x-text="request.ResHeaders"></pre>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row">
			<!-- Request Body -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Request Body</h5>
						<button class="btn btn-sm btn-outline-secondary" @click="copyToClipboard(request.ReqBody)">
							<i class="bi bi-clipboard"></i>
						</button>
					</div>
					<div class="card-body">
						<pre class="small mb-0" style="max-height: 400px; overflow-y: auto;" x-text="request.ReqBody || '(empty)'"></pre>
					</div>
				</div>
			</div>
			
			<!-- Response Body -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Response Body</h5>
						<button class="btn btn-sm btn-outline-secondary" @click="copyToClipboard(request.ResBody)">
							<i class="bi bi-clipboard"></i>
						</button>
					</div>
					<div class="card-body">
						<pre class="small mb-0" style="max-height: 400px; overflow-y: auto;" x-text="request.ResBody || '(empty)'"></pre>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Hashes -->
		<div class="row">
			<div class="col-12 mb-4">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Hashes</h5>
					</div>
					<div class="card-body">
						<div class="row">
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Request Hash</div>
								<code class="small" x-text="request.ReqHash"></code>
							</div>
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Response Hash</div>
								<code class="small" x-text="request.ResHash"></code>
							</div>
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Request Hash 1</div>
								<code class="small" x-text="request.ReqHash1"></code>
							</div>
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Response Body Hash</div>
								<code class="small" x-text="request.ResBodyHash"></code>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<script>
		function requestDetail() {
			return {
				request: @{request},
				showNotesForm: false,
				noteForm: {
					title: '',
					content: ''
				},
				
				copyAsCurl() {
					// TODO: Implement cURL generation
					alert('Copy as cURL functionality will be implemented');
				},
				
				openInVSCode() {
					// TODO: Implement VS Code integration
					alert('Open in VS Code functionality will be implemented');
				},
				
				addNote() {
					// TODO: Implement note saving
					alert('Note saved: ' + this.noteForm.title);
					this.noteForm = { title: '', content: '' };
					this.showNotesForm = false;
				},
				
				copyToClipboard(text) {
					navigator.clipboard.writeText(text).then(() => {
						// Show temporary success message
						const btn = event.target.closest('button');
						const originalHTML = btn.innerHTML;
						btn.innerHTML = '<i class="bi bi-check"></i>';
						btn.classList.add('btn-success');
						btn.classList.remove('btn-outline-secondary');
						setTimeout(() => {
							btn.innerHTML = originalHTML;
							btn.classList.remove('btn-success');
							btn.classList.add('btn-outline-secondary');
						}, 1000);
					});
				},
				
				getMethodBadgeClass(method) {
					const classes = {
						'GET': 'bg-success',
						'POST': 'bg-primary',
						'PUT': 'bg-warning',
						'DELETE': 'bg-danger',
						'PATCH': 'bg-info'
					};
					return classes[method] || 'bg-secondary';
				},
				
				getStatusBadgeClass(status) {
					if (status >= 200 && status < 300) return 'bg-success';
					if (status >= 300 && status < 400) return 'bg-warning';
					if (status >= 400 && status < 500) return 'bg-danger';
					if (status >= 500) return 'bg-dark';
					return 'bg-secondary';
				},
				
				formatBytes(bytes) {
					if (bytes === 0) return '0 B';
					const k = 1024;
					const sizes = ['B', 'KB', 'MB', 'GB'];
					const i = Math.floor(Math.log(bytes) / Math.log(k));
					return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
				},
				
				formatDate(timestamp) {
					return new Date(timestamp * 1000).toLocaleString();
				}
			}
		}
	</script>
}



