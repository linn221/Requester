package templates

import "linn221/Requester/requests"
import "strconv"

// Request listing page
templ RequestsListPage(requests []requests.MyRequest, orderBy, direction, importJobID, endpointID, search, pageTitle string) {
	@LayoutWithNav(pageTitle + " - App", RequestsList(requests, orderBy, direction, importJobID, endpointID, search, pageTitle), "requests")
}

// Request listing component
templ RequestsList(requests []requests.MyRequest, orderBy, direction, importJobID, endpointID, search, pageTitle string) {
	<div class="container-fluid px-0">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h2>{ pageTitle }</h2>
				</div>
				<!-- Search bar with HTMX -->
				<div class="input-group mb-3">
					<input type="hidden" name="import_job_id" value={ importJobID }>
					<input type="hidden" name="endpoint_id" value={ endpointID }>
					<input 
						type="text" 
						class="form-control" 
						placeholder="Search requests..." 
						aria-label="Search requests"
						name="search"
						value={ search }
						hx-get="/dashboard/requests"
						hx-trigger="keyup changed delay:500ms"
						hx-target="#requests-content"
						hx-include="[name='search'], [name='import_job_id'], [name='endpoint_id'], [id='orderBy'], [id='direction']"
					>
					<button class="btn btn-outline-secondary" type="button">
						<i class="bi bi-search"></i>
					</button>
				</div>
				
				<!-- Ordering controls -->
				<div class="row mb-3">
					<div class="col-md-6">
						<div class="d-flex align-items-center gap-2">
							<label for="orderBy" class="form-label mb-0">Sort by:</label>
							<select class="form-select form-select-sm" id="orderBy" hx-get="/dashboard/requests" hx-trigger="change" hx-target="#requests-content" hx-include="[name='search'], [name='import_job_id'], [name='endpoint_id'], [id='orderBy'], [id='direction']">
								<option value="sequence_number" selected={ orderBy == "sequence_number" }>Sequence</option>
								<option value="method" selected={ orderBy == "method" }>Method</option>
								<option value="status" selected={ orderBy == "status" }>Status</option>
								<option value="url" selected={ orderBy == "url" }>URL</option>
								<option value="domain" selected={ orderBy == "domain" }>Domain</option>
								<option value="size" selected={ orderBy == "size" }>Size</option>
								<option value="type" selected={ orderBy == "type" }>Type</option>
								<option value="latency" selected={ orderBy == "latency" }>Latency</option>
							</select>
						</div>
					</div>
					<div class="col-md-6">
						<div class="d-flex align-items-center gap-2">
							<label for="direction" class="form-label mb-0">Direction:</label>
							<select class="form-select form-select-sm" id="direction" hx-get="/dashboard/requests" hx-trigger="change" hx-target="#requests-content" hx-include="[name='search'], [name='import_job_id'], [name='endpoint_id'], [id='orderBy'], [id='direction']">
								<option value="ASC" selected={ direction == "ASC" }>Ascending</option>
								<option value="DESC" selected={ direction == "DESC" }>Descending</option>
							</select>
						</div>
					</div>
				</div>
			</div>
		</div>

		if len(requests) == 0 {
			<div class="row">
				<div class="col-12">
					<div class="card">
						<div class="card-body text-center py-5">
							<i class="bi bi-inbox display-1 text-muted"></i>
							<h4 class="mt-3 text-muted">No Requests Found</h4>
							<p class="text-muted">Import a HAR file to see requests here.</p>
							<a href="/dashboard/import" class="btn btn-primary">
								<i class="bi bi-upload"></i> Import HAR File
							</a>
						</div>
					</div>
				</div>
			</div>
		} else {
			<div id="requests-content">
				<div class="row">
					for _, request := range requests {
					<div class="col-12 mb-3">
						<div class="card">
							<div class="card-body">
								<div class="row">
									<div class="col-md-8">
										<div class="d-flex align-items-center gap-2 mb-3">
											<span class="badge bg-secondary">#{ strconv.Itoa(request.Sequence) }</span>
											<span class={ getMethodBadgeClass(request.Method) }>{ request.Method }</span>
											<span class={ getStatusBadgeClass(request.ResStatus) }>{ request.ResStatus }</span>
										</div>
										
										<div class="mb-3">
											<strong>URL:</strong>
											<div class="url-text mt-1">
												<a href={ request.URL } target="_blank" rel="noopener noreferrer" class="text-decoration-none">
													{ truncateURL(request.URL, 80) }
												</a>
												if len(request.URL) > 80 {
													<button 
														type="button" 
														class="btn btn-link btn-sm p-0 ms-1 fw-bold"
														onclick="this.previousElementSibling.textContent = this.getAttribute('data-full-url'); this.textContent = 'less'; this.onclick = function() { this.previousElementSibling.textContent = this.getAttribute('data-truncated'); this.textContent = 'more'; this.onclick = arguments.callee; }"
														data-full-url={ request.URL }
														data-truncated={ truncateURL(request.URL, 80) }
													>
														more
													</button>
												}
											</div>
										</div>
										
										<div class="row g-3">
											<div class="col-sm-6 col-md-3">
												<small class="text-muted d-block">Domain</small>
												<div class="fw-medium">{ request.Domain }</div>
											</div>
											<div class="col-sm-6 col-md-3">
												<small class="text-muted d-block">Size</small>
												<div class="fw-medium">{ formatBytes(request.RespSize) }</div>
											</div>
											<div class="col-sm-6 col-md-3">
												<small class="text-muted d-block">Type</small>
												<div class="fw-medium small">{ getContentType(request.ResHeaders) }</div>
											</div>
											<div class="col-sm-6 col-md-3">
												<small class="text-muted d-block">Latency</small>
												<div class="fw-medium">{ request.LatencyMs }ms</div>
											</div>
										</div>
									</div>
									
									<div class="col-md-4">
										<div class="d-flex justify-content-end mb-3">
											<a href={ "/dashboard/requests/detail/" + strconv.FormatUint(uint64(request.ID), 10) } class="btn btn-outline-primary">
												<i class="bi bi-eye"></i> View Details
											</a>
										</div>
										
										<div>
											<small class="text-muted d-block mb-2">Hashes</small>
											<div class="small">
												<div class="mb-1">
													<span class="text-muted">Req:</span> 
													<code class="small">{ request.ReqHash }</code>
												</div>
												<div class="mb-1">
													<span class="text-muted">Res:</span> 
													<code class="small">{ request.ResHash }</code>
												</div>
												<div class="mb-1">
													<span class="text-muted">Req1:</span> 
													<code class="small">{ request.ReqHash1 }</code>
												</div>
												<div>
													<span class="text-muted">Body:</span> 
													<code class="small">{ request.ResBodyHash }</code>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					}
				</div>
			</div>
		}
	</div>
	
}

// Helper function to build search URL
func buildSearchURL(importJobID, endpointID, orderBy, direction string) string {
	baseURL := "/dashboard/requests?"
	
	if endpointID != "" {
		baseURL += "endpoint_id=" + endpointID
	} else if importJobID != "" {
		baseURL += "import_job_id=" + importJobID
	}
	
	if orderBy != "" {
		baseURL += "&order_by=" + orderBy
	}
	
	if direction != "" {
		asc := "true"
		if direction == "DESC" {
			asc = "false"
		}
		baseURL += "&asc=" + asc
	}
	
	return baseURL
}


// Helper function to truncate URL
func truncateURL(url string, maxLength int) string {
	if len(url) <= maxLength {
		return url
	}
	return url[:maxLength] + "..."
}

// Helper function to truncate hash for display
func truncateHash(hash string) string {
	if len(hash) <= 12 {
		return hash
	}
	return hash[:12] + "..."
}
