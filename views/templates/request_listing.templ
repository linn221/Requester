package templates

import "linn221/Requester/requests"
import "strconv"

// OrderClause represents a single order clause for template
type OrderClause struct {
	Column    string
	Direction string
}

// FilterState represents the current filter state
type FilterState struct {
	Search      string
	ImportJobID string
	EndpointIDs []string
	Methods     []string
	Statuses    []string
	Types       []string
	SizeMin     string
	SizeMax     string
	Orders      []OrderClause
}

// Request listing page
templ RequestsListPage(requests []requests.MyRequest, filterState FilterState, pageTitle string, endpoints []requests.Endpoint) {
	@LayoutWithNav(pageTitle, RequestsList(requests, filterState, pageTitle, endpoints), "requests")
}

// Request listing component
templ RequestsList(requests []requests.MyRequest, filterState FilterState, pageTitle string, endpoints []requests.Endpoint) {
	<div class="container-fluid" x-data="{ 
		expandedURLs: {},
		showAdvancedFilters: false,
		filters: {
			search: '',
			importJobID: '',
			endpointIDs: [],
			methods: [],
			statuses: [],
			types: [],
			sizeMin: '',
			sizeMax: '',
			orders: [
				{ column: 'created_at', direction: 'desc' }
			]
		},
		availableColumns: [
			{ value: '', label: 'Select Column' },
			{ value: 'created_at', label: 'Created At' },
			{ value: 'method', label: 'Method' },
			{ value: 'url', label: 'URL' },
			{ value: 'res_status', label: 'Status' },
			{ value: 'latency_ms', label: 'Latency' },
			{ value: 'domain', label: 'Domain' },
			{ value: 'resp_size', label: 'Size' }
		],
		availableMethods: [
			{ value: 'GET', label: 'GET' },
			{ value: 'POST', label: 'POST' },
			{ value: 'PUT', label: 'PUT' },
			{ value: 'PATCH', label: 'PATCH' },
			{ value: 'DELETE', label: 'DELETE' },
			{ value: 'HEAD', label: 'HEAD' },
			{ value: 'OPTIONS', label: 'OPTIONS' }
		],
		availableStatuses: [
			{ value: '200', label: '200 - OK' },
			{ value: '201', label: '201 - Created' },
			{ value: '204', label: '204 - No Content' },
			{ value: '301', label: '301 - Moved Permanently' },
			{ value: '302', label: '302 - Found' },
			{ value: '400', label: '400 - Bad Request' },
			{ value: '401', label: '401 - Unauthorized' },
			{ value: '403', label: '403 - Forbidden' },
			{ value: '404', label: '404 - Not Found' },
			{ value: '500', label: '500 - Internal Server Error' }
		],
		availableTypes: [
			{ value: 'Web', label: 'Web' },
			{ value: 'API', label: 'API' },
			{ value: 'GraphQL', label: 'GraphQL' }
		],
		addOrderFilter() {
			// Add a new order filter
			this.filters.orders.push({ column: 'created_at', direction: 'desc' });
		},
		removeOrderFilter(index) {
			// Remove the order filter at the given index
			this.filters.orders.splice(index, 1);
		},
		buildFilterURL() {
			const params = new URLSearchParams();
			
			// Add search only if not empty
			if (this.filters.search && this.filters.search.trim() !== '') {
				params.append('search', this.filters.search);
			}
			
			// Add import job ID only if not empty, zero, undefined, or null
			if (this.filters.importJobID && 
				this.filters.importJobID !== '' && 
				this.filters.importJobID !== '0' && 
				this.filters.importJobID !== 'undefined' && 
				this.filters.importJobID !== 'null') {
				params.append('import_job_id', this.filters.importJobID);
			}
			
			// Add endpoint IDs as array
			if (this.filters.endpointIDs && this.filters.endpointIDs.length > 0) {
				for (const endpointID of this.filters.endpointIDs) {
					if (endpointID && endpointID !== '' && endpointID !== '0') {
						params.append('endpoint_ids[]', endpointID);
					}
				}
			}
			
			// Add methods as array
			if (this.filters.methods && this.filters.methods.length > 0) {
				for (const method of this.filters.methods) {
					if (method && method !== '') {
						params.append('methods[]', method);
					}
				}
			}
			
			// Add statuses as array
			if (this.filters.statuses && this.filters.statuses.length > 0) {
				for (const status of this.filters.statuses) {
					if (status && status !== '') {
						params.append('statuses[]', status);
					}
				}
			}
			
			// Add types as array
			if (this.filters.types && this.filters.types.length > 0) {
				for (const type of this.filters.types) {
					if (type && type !== '') {
						params.append('types[]', type);
					}
				}
			}
			
			// Add size range
			if (this.filters.sizeMin && this.filters.sizeMin !== '') {
				params.append('size_min', this.filters.sizeMin);
			}
			if (this.filters.sizeMax && this.filters.sizeMax !== '') {
				params.append('size_max', this.filters.sizeMax);
			}
			
			// Add order parameters
			let orderIndex = 0;
			for (const order of this.filters.orders) {
				if (order.column && order.column !== '') {
					params.append(`order_${orderIndex}`, order.column);
					params.append(`direction_${orderIndex}`, order.direction);
					orderIndex++;
				}
			}
			
			return '/dashboard/requests?' + params.toString();
		},
		executeQuery() {
			const url = this.buildFilterURL();
			// Use HTMX to load the new results
			htmx.ajax('GET', url, { target: '#requests-list', swap: 'outerHTML' });
		},
		init() {
			// Initialize filters with server values
			this.filters.search = '{ filterState.Search }';
			this.filters.importJobID = '{ filterState.ImportJobID }';
			this.filters.endpointIDs = { getEndpointIDsJS(filterState.EndpointIDs) };
			this.filters.methods = { getMethodsJS(filterState.Methods) };
			this.filters.statuses = { getStatusesJS(filterState.Statuses) };
			this.filters.types = { getTypesJS(filterState.Types) };
			this.filters.sizeMin = '{ filterState.SizeMin }';
			this.filters.sizeMax = '{ filterState.SizeMax }';
			this.filters.orders = [
				{ column: '{ filterState.Orders[0].Column }', direction: '{ filterState.Orders[0].Direction }' }
			];
		}
	}" id="requests-list">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h2>{ pageTitle }</h2>
				</div>
				
				<!-- Dynamic Filter Section -->
				<div class="card mb-4">
					<div class="card-header">
						<h5 class="card-title mb-0">
							<i class="bi bi-funnel"></i> Filters & Sorting
						</h5>
					</div>
					<div class="card-body">
						<!-- Search Bar -->
						<div class="row mb-3">
							<div class="col-12">
								<label class="form-label fw-bold">Search</label>
								<div class="input-group">
									<input 
										type="text" 
										class="form-control" 
										placeholder="Search requests..." 
										aria-label="Search requests"
										x-model="filters.search"
									>
									<button class="btn btn-outline-secondary" type="button" @click="executeQuery()">
										<i class="bi bi-search"></i>
									</button>
								</div>
							</div>
						</div>

						<!-- Endpoint Filter -->
						<div class="row mb-3">
							<div class="col-12">
								<label class="form-label fw-bold">Endpoints</label>
								<select class="form-select" multiple x-model="filters.endpointIDs" size="4">
									for _, endpoint := range endpoints {
										<option value={ strconv.FormatUint(uint64(endpoint.ID), 10) }>
											{ endpoint.Method } { endpoint.Domain }{ endpoint.URI } ({ endpoint.EndpointType })
										</option>
									}
								</select>
								<small class="form-text text-muted">Hold Ctrl/Cmd to select multiple endpoints</small>
							</div>
						</div>

						<!-- Order Filters -->
						<div class="row mb-3">
							<div class="col-12">
								<div class="d-flex justify-content-between align-items-center mb-2">
									<label class="form-label fw-bold mb-0">Order By</label>
									<button type="button" class="btn btn-sm btn-outline-primary" @click="addOrderFilter()" x-show="filters.orders.length < 4">
										<i class="bi bi-plus"></i> Add Order
									</button>
								</div>
								
								<template x-for="(order, index) in filters.orders" :key="index">
									<div class="row mb-2">
										<div class="col-md-5">
											<select class="form-select" x-model="order.column">
												<template x-for="col in availableColumns" :key="col.value">
													<option :value="col.value" x-text="col.label"></option>
												</template>
											</select>
										</div>
										<div class="col-md-3">
											<select class="form-select" x-model="order.direction">
												<option value="asc">Ascending</option>
												<option value="desc">Descending</option>
											</select>
										</div>
										<div class="col-md-2">
											<button type="button" class="btn btn-outline-danger btn-sm" @click="removeOrderFilter(index)" x-show="filters.orders.length > 1">
												<i class="bi bi-trash"></i> Remove
											</button>
										</div>
									</div>
								</template>
							</div>
						</div>

						<!-- Advanced Filters Toggle -->
						<div class="row mb-3">
							<div class="col-12">
								<button type="button" class="btn btn-outline-secondary" @click="showAdvancedFilters = !showAdvancedFilters">
									<i class="bi" :class="showAdvancedFilters ? 'bi-chevron-up' : 'bi-chevron-down'"></i>
									Show Advanced Filters
								</button>
							</div>
						</div>

						<!-- Advanced Filters Section -->
						<div x-show="showAdvancedFilters" class="row mb-3">
							<div class="col-12">
								<div class="card border-secondary">
									<div class="card-header bg-light">
										<h6 class="mb-0">Advanced Filters</h6>
									</div>
									<div class="card-body">
										<!-- Method Filter -->
										<div class="row mb-3">
											<div class="col-md-6">
												<label class="form-label fw-bold">Methods</label>
												<select class="form-select" multiple x-model="filters.methods" size="3">
													<template x-for="method in availableMethods" :key="method.value">
														<option :value="method.value" x-text="method.label"></option>
													</template>
												</select>
											</div>
											<div class="col-md-6">
												<label class="form-label fw-bold">Status Codes</label>
												<select class="form-select" multiple x-model="filters.statuses" size="3">
													<template x-for="status in availableStatuses" :key="status.value">
														<option :value="status.value" x-text="status.label"></option>
													</template>
												</select>
											</div>
										</div>

										<!-- Type and Size Filters -->
										<div class="row mb-3">
											<div class="col-md-6">
												<label class="form-label fw-bold">Endpoint Types</label>
												<select class="form-select" multiple x-model="filters.types" size="3">
													<template x-for="type in availableTypes" :key="type.value">
														<option :value="type.value" x-text="type.label"></option>
													</template>
												</select>
											</div>
											<div class="col-md-6">
												<label class="form-label fw-bold">Response Size Range (bytes)</label>
												<div class="row">
													<div class="col-6">
														<input type="number" class="form-control" placeholder="Min" x-model="filters.sizeMin">
													</div>
													<div class="col-6">
														<input type="number" class="form-control" placeholder="Max" x-model="filters.sizeMax">
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>

						<!-- URL Display and Query Button -->
						<div class="row">
							<div class="col-12">
								<label class="form-label fw-bold">Generated Query URL</label>
								<div class="input-group mb-2">
									<input type="text" class="form-control font-monospace" :value="buildFilterURL()" readonly>
									<button class="btn btn-outline-secondary" type="button" @click="navigator.clipboard.writeText(buildFilterURL())">
										<i class="bi bi-clipboard"></i>
									</button>
								</div>
								<div class="d-flex justify-content-end">
									<button type="button" class="btn btn-primary" @click="executeQuery()">
										<i class="bi bi-play-circle"></i> Execute Query
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		if len(requests) == 0 {
			<div class="row">
				<div class="col-12">
					<div class="card">
						<div class="card-body text-center py-5">
							<i class="bi bi-inbox display-1 text-muted"></i>
							<h4 class="mt-3 text-muted">No Requests Found</h4>
							<p class="text-muted">Import a HAR file to see requests here.</p>
							<a href="/dashboard/import" class="btn btn-primary">
								<i class="bi bi-upload"></i> Import HAR File
							</a>
						</div>
					</div>
				</div>
			</div>
		} else {
			<div class="row">
				for _, request := range requests {
					<div class="col-12 mb-3">
						<div class="card h-100">
							<div class="card-body">
								<!-- Header row with sequence, method, status, and action -->
								<div class="row align-items-center mb-3">
									<div class="col-auto">
										<span class="badge bg-secondary fs-6">#{ strconv.Itoa(request.Sequence) }</span>
									</div>
									<div class="col-auto">
										<span class={ getMethodBadgeClass(request.Method) }>{ request.Method }</span>
									</div>
									<div class="col-auto">
										<span class={ getStatusBadgeClass(request.ResStatus) }>{ request.ResStatus }</span>
									</div>
									<div class="col-auto ms-auto">
										<a href={ "/dashboard/requests/detail/" + strconv.FormatUint(uint64(request.ID), 10) } class="btn btn-outline-primary btn-sm">
											<i class="bi bi-eye"></i> View Details
										</a>
									</div>
								</div>

								<!-- URL (full width) - clickable hyperlink -->
								<div class="mb-3">
									<label class="form-label fw-bold text-muted small">URL</label>
									<div class="url-text">
										<a href={ request.URL } target="_blank" rel="noopener noreferrer" class="text-decoration-none">
											<span 
												x-text="expandedURLs['url-{ strconv.FormatUint(uint64(request.ID), 10) }'] ? $el.getAttribute('data-full-url') : $el.getAttribute('data-truncated-url')"
												data-full-url={ request.URL }
												data-truncated-url={ truncateURL(request.URL, 100) }
												class="text-break"
											></span>
										</a>
										if len(request.URL) > 100 {
											<button 
												type="button" 
												class="btn btn-link btn-sm p-0 ms-1 fw-bold"
												@click="expandedURLs['url-{ strconv.FormatUint(uint64(request.ID), 10) }'] = !expandedURLs['url-{ strconv.FormatUint(uint64(request.ID), 10) }']"
												x-text="expandedURLs['url-{ strconv.FormatUint(uint64(request.ID), 10) }'] ? 'less' : 'more'"
											></button>
										}
									</div>
								</div>

								<!-- Endpoint (full width) - fixed length display -->
								<div class="mb-3">
									<label class="form-label fw-bold text-muted small">Endpoint</label>
									<div>
										<a href={ "/dashboard/endpoints/" + strconv.FormatUint(uint64(request.EndpointID), 10) } class="text-decoration-none">
											<span class={ getMethodBadgeClass(request.Method) }>{ request.Method }</span>
											<span class="ms-2 text-break">{ truncateURL(request.Domain + ExtractURIWithoutQuery(request.URL), 80) }</span>
										</a>
									</div>
								</div>

								<!-- Details row -->
								<div class="row">
									<div class="col-md-3">
										<label class="form-label fw-bold text-muted small">Domain</label>
										<div class="text-break">{ request.Domain }</div>
									</div>
									<div class="col-md-3">
										<label class="form-label fw-bold text-muted small">Size / Type</label>
										<div>
											<div>{ formatBytes(request.RespSize) }</div>
											<div class="small text-muted">{ getContentType(request.ResHeaders) }</div>
										</div>
									</div>
									<div class="col-md-3">
										<label class="form-label fw-bold text-muted small">Latency</label>
										<div>{ request.LatencyMs }ms</div>
									</div>
								</div>

								<!-- Hashes section (full width) -->
								<div class="mt-3">
									<label class="form-label fw-bold text-muted small">Hashes</label>
									<div class="row">
										<div class="col-md-3">
											<div class="small">
												<span class="text-muted">Req:</span>
												<code class="small ms-1">{ request.ReqHash }</code>
											</div>
										</div>
										<div class="col-md-3">
											<div class="small">
												<span class="text-muted">Res:</span>
												<code class="small ms-1">{ request.ResHash }</code>
											</div>
										</div>
										<div class="col-md-3">
											<div class="small">
												<span class="text-muted">Req1:</span>
												<code class="small ms-1">{ request.ReqHash1 }</code>
											</div>
										</div>
										<div class="col-md-3">
											<div class="small">
												<span class="text-muted">Body:</span>
												<code class="small ms-1">{ request.ResBodyHash }</code>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		}
	</div>
}
