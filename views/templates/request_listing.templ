package templates

import "linn221/Requester/requests"
import "strconv"
import "strings"

// Request listing page
templ RequestsListPage(requests []requests.MyRequest, orderBy string) {
	@LayoutWithNav("Requests - App", RequestsList(requests, orderBy), "requests")
}

// Request listing component
templ RequestsList(requests []requests.MyRequest, orderBy string) {
	<div class="container-fluid">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h2>Requests</h2>
				</div>
				<!-- Search bar (UI only) - full width -->
				<div class="input-group mb-3">
					<input type="text" class="form-control" placeholder="Search requests..." aria-label="Search requests">
					<button class="btn btn-outline-secondary" type="button">
						<i class="bi bi-search"></i>
					</button>
				</div>
			</div>
		</div>

		if len(requests) == 0 {
			<div class="row">
				<div class="col-12">
					<div class="card">
						<div class="card-body text-center py-5">
							<i class="bi bi-inbox display-1 text-muted"></i>
							<h4 class="mt-3 text-muted">No Requests Found</h4>
							<p class="text-muted">Import a HAR file to see requests here.</p>
							<a href="/dashboard/import" class="btn btn-primary">
								<i class="bi bi-upload"></i> Import HAR File
							</a>
						</div>
					</div>
				</div>
			</div>
		} else {
			<div class="table-responsive">
				<table class="table table-hover">
					<thead class="table-light">
						<tr>
							<th>
								<a href="#" class="text-decoration-none text-dark" onclick="sortColumn('sequence_number')">
									# { getSortIcon("sequence_number", orderBy) }
								</a>
							</th>
							<th>
								<a href="#" class="text-decoration-none text-dark" onclick="sortColumn('method')">
									Method { getSortIcon("method", orderBy) }
								</a>
							</th>
							<th>
								<a href="#" class="text-decoration-none text-dark" onclick="sortColumn('status')">
									Status { getSortIcon("status", orderBy) }
								</a>
							</th>
							<th>
								<a href="#" class="text-decoration-none text-dark" onclick="sortColumn('url')">
									URL { getSortIcon("url", orderBy) }
								</a>
							</th>
							<th>
								<a href="#" class="text-decoration-none text-dark" onclick="sortColumn('domain')">
									Domain { getSortIcon("domain", orderBy) }
								</a>
							</th>
							<th>
								<a href="#" class="text-decoration-none text-dark" onclick="sortColumn('size')">
									Size / Type { getSortIcon("size", orderBy) }
								</a>
							</th>
							<th>
								<a href="#" class="text-decoration-none text-dark" onclick="sortColumn('latency')">
									Latency { getSortIcon("latency", orderBy) }
								</a>
							</th>
							<th>Hashes</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody>
						for _, request := range requests {
							<tr>
								<td>{ strconv.Itoa(request.Sequence) }</td>
								<td>
									<span class={ getMethodBadgeClass(request.Method) }>{ request.Method }</span>
								</td>
								<td>
									<span class={ getStatusBadgeClass(request.ResStatus) }>{ request.ResStatus }</span>
								</td>
								<td>
									<div class="url-text" title={ request.URL }>{ request.URL }</div>
								</td>
								<td>{ request.Domain }</td>
								<td>
									<div class="d-flex flex-column gap-1">
										<span>{ formatBytes(request.RespSize) }</span>
										<span class="small text-muted">{ getContentType(request.ResHeaders) }</span>
									</div>
								</td>
								<td>{ request.LatencyMs }ms</td>
								<td>
									<div class="d-flex flex-column gap-1">
										<div class="small">
											<div class="text-muted">Req:</div>
											<code class="small">{ request.ReqHash }</code>
										</div>
										<div class="small">
											<div class="text-muted">Res:</div>
											<code class="small">{ request.ResHash }</code>
										</div>
										<div class="small">
											<div class="text-muted">Req1:</div>
											<code class="small">{ request.ReqHash1 }</code>
										</div>
										<div class="small">
											<div class="text-muted">Body:</div>
											<code class="small">{ request.ResBodyHash }</code>
										</div>
									</div>
								</td>
								<td>
									<a href={ "/dashboard/requests/detail/" + strconv.FormatUint(uint64(request.ID), 10) } class="btn btn-outline-primary btn-sm">
										<i class="bi bi-eye"></i> View Details
									</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
	
	<script>
		let currentOrderBy = '';
		let currentDirection = 'ASC';
		
		function sortColumn(column) {
			// Parse current orderBy to get direction
			if (currentOrderBy === column) {
				// Toggle direction
				currentDirection = currentDirection === 'ASC' ? 'DESC' : 'ASC';
			} else {
				// New column, start with ASC
				currentDirection = 'ASC';
			}
			
			currentOrderBy = column;
			
			// Get current URL parameters
			const urlParams = new URLSearchParams(window.location.search);
			urlParams.set('order_by', column + ':' + currentDirection);
			
			// Make HTMX request
			const newUrl = window.location.pathname + '?' + urlParams.toString();
			htmx.ajax('GET', newUrl, {target: '#main', swap: 'innerHTML'});
		}
		
		// Initialize current orderBy from URL
		const urlParams = new URLSearchParams(window.location.search);
		const orderByParam = urlParams.get('order_by');
		if (orderByParam) {
			const parts = orderByParam.split(':');
			currentOrderBy = parts[0];
			currentDirection = parts[1] || 'ASC';
		}
	</script>
}

// Helper function to get sort icon based on current order
func getSortIcon(column, orderBy string) string {
	if orderBy == "" {
		return ""
	}
	
	parts := strings.Split(orderBy, ":")
	if len(parts) < 2 {
		return ""
	}
	
	currentColumn := parts[0]
	direction := parts[1]
	
	if currentColumn != column {
		return ""
	}
	
	if direction == "ASC" {
		return "↑"
	} else if direction == "DESC" {
		return "↓"
	}
	
	return ""
}
