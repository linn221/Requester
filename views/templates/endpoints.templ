package templates

import "linn221/Requester/requests"
import "strconv"
import "fmt"

// Endpoints listing page
templ EndpointsListPage(endpoints []requests.Endpoint) {
	@LayoutWithNav("Endpoints - App", EndpointsList(endpoints), "endpoints")
}

// Endpoints listing component
templ EndpointsList(endpoints []requests.Endpoint) {
	<div class="container-fluid">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h2>Endpoints</h2>
				</div>
			</div>
		</div>

		if len(endpoints) == 0 {
			<div class="row">
				<div class="col-12">
					<div class="card">
						<div class="card-body text-center py-5">
							<i class="bi bi-inbox display-1 text-muted"></i>
							<h4 class="mt-3 text-muted">No Endpoints Found</h4>
							<p class="text-muted">Import a HAR file to see endpoints here.</p>
							<a href="/dashboard/import" class="btn btn-primary">
								<i class="bi bi-upload"></i> Import HAR File
							</a>
						</div>
					</div>
				</div>
			</div>
		} else {
			<div class="table-responsive">
				<table class="table table-hover">
					<thead class="table-light">
						<tr>
							<th>Method</th>
							<th>Domain</th>
							<th>URI</th>
							<th>Type</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody>
						for _, endpoint := range endpoints {
							<tr>
								<td>
									<span class={ getMethodBadgeClass(endpoint.Method) }>{ endpoint.Method }</span>
								</td>
								<td>{ endpoint.Domain }</td>
								<td>
									<div class="url-text" title={ endpoint.URI }>{ endpoint.URI }</div>
								</td>
								<td>
									<span class={ getEndpointTypeBadgeClass(endpoint.EndpointType) }>{ string(endpoint.EndpointType) }</span>
								</td>
								<td>
									<a href={ "/dashboard/endpoints/" + strconv.FormatUint(uint64(endpoint.ID), 10) } class="btn btn-outline-primary btn-sm me-2">
										<i class="bi bi-eye"></i> View Details
									</a>
									<a href={ "/dashboard/requests?endpoint_id=" + strconv.FormatUint(uint64(endpoint.ID), 10) } class="btn btn-outline-secondary btn-sm">
										<i class="bi bi-list"></i> View Requests
									</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
}

// Endpoint detail page
templ EndpointDetailPage(endpoint requests.Endpoint, stats map[string]interface{}) {
	@LayoutWithNav("Endpoint Details - App", EndpointDetail(endpoint, stats), "endpoints")
}

// Endpoint detail component
templ EndpointDetail(endpoint requests.Endpoint, stats map[string]interface{}) {
	<div class="container-fluid">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center mb-3">
					<h2>Endpoint Details</h2>
					<a href="/dashboard/endpoints" class="btn btn-outline-secondary">
						<i class="bi bi-arrow-left"></i> Back to Endpoints
					</a>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-md-8">
				<div class="card mb-4">
					<div class="card-header">
						<h5 class="card-title mb-0">Endpoint Information</h5>
					</div>
					<div class="card-body">
						<div class="row">
							<div class="col-sm-3">
								<strong>Method:</strong>
							</div>
							<div class="col-sm-9">
								<span class={ getMethodBadgeClass(endpoint.Method) }>{ endpoint.Method }</span>
							</div>
						</div>
						<hr>
						<div class="row">
							<div class="col-sm-3">
								<strong>Domain:</strong>
							</div>
							<div class="col-sm-9">
								<code>{ endpoint.Domain }</code>
							</div>
						</div>
						<hr>
						<div class="row">
							<div class="col-sm-3">
								<strong>URI:</strong>
							</div>
							<div class="col-sm-9">
								<code>{ endpoint.URI }</code>
							</div>
						</div>
						<hr>
						<div class="row">
							<div class="col-sm-3">
								<strong>Type:</strong>
							</div>
							<div class="col-sm-9">
								<span class={ getEndpointTypeBadgeClass(endpoint.EndpointType) }>{ string(endpoint.EndpointType) }</span>
							</div>
						</div>
						if endpoint.Notes != "" {
							<hr>
							<div class="row">
								<div class="col-sm-3">
									<strong>Notes:</strong>
								</div>
								<div class="col-sm-9">
									<p class="mb-0">{ endpoint.Notes }</p>
								</div>
							</div>
						}
					</div>
				</div>
			</div>

			<div class="col-md-4">
				<div class="card mb-4">
					<div class="card-header">
						<h5 class="card-title mb-0">Statistics</h5>
					</div>
					<div class="card-body">
						<div class="row text-center">
							<div class="col-6">
								<div class="border-end">
									<h3 class="text-primary mb-1">{ stats["total_requests"].(int64) }</h3>
									<small class="text-muted">Total Requests</small>
								</div>
							</div>
							<div class="col-6">
								<h3 class="text-success mb-1">{ fmt.Sprintf("%.1f", stats["avg_latency"].(float64)) }ms</h3>
								<small class="text-muted">Avg Latency</small>
							</div>
						</div>
					</div>
				</div>

				<div class="card">
					<div class="card-header">
						<h5 class="card-title mb-0">Actions</h5>
					</div>
					<div class="card-body">
						<a href={ "/dashboard/requests?endpoint_id=" + strconv.FormatUint(uint64(endpoint.ID), 10) } class="btn btn-primary w-100 mb-2">
							<i class="bi bi-list"></i> View All Requests
						</a>
					</div>
				</div>
			</div>
		</div>
	</div>
}

// Helper function to get endpoint type badge class
func getEndpointTypeBadgeClass(endpointType requests.EndpointType) string {
	switch endpointType {
	case requests.EndpointTypeWeb:
		return "badge bg-info"
	case requests.EndpointTypeAPI:
		return "badge bg-primary"
	case requests.EndpointTypeGraphQL:
		return "badge bg-success"
	default:
		return "badge bg-secondary"
	}
}
