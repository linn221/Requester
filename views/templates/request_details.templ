package templates

import "linn221/Requester/requests"

// Request details page
templ RequestDetailPage(request requests.MyRequest) {
	@LayoutWithNav("Request Details - App", RequestDetail(request), "requests")
}

// Request details component
templ RequestDetail(request requests.MyRequest) {
	<div id="app" class="container-fluid">
		<div class="row mb-4">
			<div class="col-12">
				<div class="d-flex justify-content-between align-items-center">
					<div>
						<button class="btn btn-outline-secondary btn-sm me-2" @click="goBack">
							<i class="bi bi-arrow-left"></i> Back
						</button>
						<h2 class="d-inline">Request Details</h2>
					</div>
					<div>
						<button class="btn btn-outline-primary btn-sm me-2" @click="copyAsCurl">
							<i class="bi bi-clipboard"></i> Copy as cURL
						</button>
						<button class="btn btn-outline-secondary btn-sm me-2" @click="openInVSCode">
							<i class="bi bi-code-square"></i> Open in VS Code
						</button>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row">
			<!-- Request Information -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Request Information</h5>
					</div>
					<div class="card-body">
						<div class="row mb-3">
							<div class="col-4"><strong>Method:</strong></div>
							<div class="col-8">
								<span class="badge method-badge">{ request.Method }</span>
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>URL:</strong></div>
							<div class="col-8">
								<code class="text-break url-text">{ request.URL }</code>
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Domain:</strong></div>
							<div class="col-8">{ request.Domain }</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Request Time:</strong></div>
							<div class="col-8">{ request.RequestTime }</div>
						</div>
					</div>
				</div>
			</div>
			
			<!-- Response Information -->
			<div class="col-lg-6 mb-4">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Response Information</h5>
					</div>
					<div class="card-body">
						<div class="row mb-3">
							<div class="col-4"><strong>Status:</strong></div>
							<div class="col-8">
								<span class="badge status-badge">{ request.ResStatus }</span>
							</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Size:</strong></div>
							<div class="col-8">{ formatBytes(request.RespSize) }</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Latency:</strong></div>
							<div class="col-8">{ request.LatencyMs }ms</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Content-Type:</strong></div>
							<div class="col-8">{ getContentType(request.ResHeaders) }</div>
						</div>
						<div class="row mb-3">
							<div class="col-4"><strong>Created:</strong></div>
							<div class="col-8">{ formatDate(request.CreatedAt) }</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row">
			<!-- Request Headers -->
			<div class="col-lg-6 mb-4" data-section="reqHeaders">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Request Headers</h5>
						<div class="btn-group btn-group-sm">
							<button class="btn btn-outline-secondary" @click="openInVSCode('reqHeaders')">
								<i class="bi bi-code-square"></i>
							</button>
							<button class="btn btn-outline-secondary" @click="copyToClipboard('reqHeaders')">
								<i class="bi bi-clipboard"></i>
							</button>
						</div>
					</div>
					<div class="card-body">
						<!-- Collapsed View -->
						<div v-show="!expandedSections.reqHeaders" class="content-preview">
							<pre class="small mb-0">{ request.ReqHeaders }</pre>
						</div>
						<!-- Expanded View -->
						<div v-show="expandedSections.reqHeaders" class="content-expanded">
							<pre class="small mb-0">{ request.ReqHeaders }</pre>
						</div>
						<button class="btn btn-outline-secondary btn-sm view-more-btn mt-2" @click="toggleSection('reqHeaders')">
							<span v-if="!expandedSections.reqHeaders">View More <i class="bi bi-chevron-down"></i></span>
							<span v-else>View Less <i class="bi bi-chevron-up"></i></span>
						</button>
					</div>
				</div>
			</div>
			
			<!-- Response Headers -->
			<div class="col-lg-6 mb-4" data-section="resHeaders">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Response Headers</h5>
						<div class="btn-group btn-group-sm">
							<button class="btn btn-outline-secondary" @click="openInVSCode('resHeaders')">
								<i class="bi bi-code-square"></i>
							</button>
							<button class="btn btn-outline-secondary" @click="copyToClipboard('resHeaders')">
								<i class="bi bi-clipboard"></i>
							</button>
						</div>
					</div>
					<div class="card-body">
						<!-- Collapsed View -->
						<div v-show="!expandedSections.resHeaders" class="content-preview">
							<pre class="small mb-0">{ request.ResHeaders }</pre>
						</div>
						<!-- Expanded View -->
						<div v-show="expandedSections.resHeaders" class="content-expanded">
							<pre class="small mb-0">{ request.ResHeaders }</pre>
						</div>
						<button class="btn btn-outline-secondary btn-sm view-more-btn mt-2" @click="toggleSection('resHeaders')">
							<span v-if="!expandedSections.resHeaders">View More <i class="bi bi-chevron-down"></i></span>
							<span v-else>View Less <i class="bi bi-chevron-up"></i></span>
						</button>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row">
			<!-- Request Body -->
			<div class="col-lg-6 mb-4" data-section="reqBody">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Request Body</h5>
						<div class="btn-group btn-group-sm">
							<button class="btn btn-outline-secondary" @click="openInVSCode('reqBody')">
								<i class="bi bi-code-square"></i>
							</button>
							<button class="btn btn-outline-secondary" @click="copyToClipboard('reqBody')">
								<i class="bi bi-clipboard"></i>
							</button>
						</div>
					</div>
					<div class="card-body">
						<!-- Collapsed View -->
						<div v-show="!expandedSections.reqBody" class="content-preview">
							<pre class="small mb-0">{ request.ReqBody }</pre>
						</div>
						<!-- Expanded View -->
						<div v-show="expandedSections.reqBody" class="content-expanded">
							<pre class="small mb-0">{ request.ReqBody }</pre>
						</div>
						<button class="btn btn-outline-secondary btn-sm view-more-btn mt-2" @click="toggleSection('reqBody')">
							<span v-if="!expandedSections.reqBody">View More <i class="bi bi-chevron-down"></i></span>
							<span v-else>View Less <i class="bi bi-chevron-up"></i></span>
						</button>
					</div>
				</div>
			</div>
			
			<!-- Response Body -->
			<div class="col-lg-6 mb-4" data-section="resBody">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Response Body</h5>
						<div class="btn-group btn-group-sm">
							<button class="btn btn-outline-secondary" @click="openInVSCode('resBody')">
								<i class="bi bi-code-square"></i>
							</button>
							<button class="btn btn-outline-secondary" @click="copyToClipboard('resBody')">
								<i class="bi bi-clipboard"></i>
							</button>
						</div>
					</div>
					<div class="card-body">
						<!-- Collapsed View -->
						<div v-show="!expandedSections.resBody" class="content-preview">
							<pre class="small mb-0">{ request.ResBody }</pre>
						</div>
						<!-- Expanded View -->
						<div v-show="expandedSections.resBody" class="content-expanded">
							<pre class="small mb-0">{ request.ResBody }</pre>
						</div>
						<button class="btn btn-outline-secondary btn-sm view-more-btn mt-2" @click="toggleSection('resBody')">
							<span v-if="!expandedSections.resBody">View More <i class="bi bi-chevron-down"></i></span>
							<span v-else>View Less <i class="bi bi-chevron-up"></i></span>
						</button>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Hashes -->
		<div class="row">
			<div class="col-12 mb-4">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Hashes</h5>
					</div>
					<div class="card-body">
						<div class="row">
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Request Hash</div>
								<code class="small">{ request.ReqHash }</code>
							</div>
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Response Hash</div>
								<code class="small">{ request.ResHash }</code>
							</div>
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Request Hash 1</div>
								<code class="small">{ request.ReqHash1 }</code>
							</div>
							<div class="col-md-3 mb-3">
								<div class="small text-muted">Response Body Hash</div>
								<code class="small">{ request.ResBodyHash }</code>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Add Notes Section -->
		<div class="row">
			<div class="col-12 mb-4">
				<div class="card">
					<div class="card-header">
						<h5 class="mb-0">Notes</h5>
					</div>
					<div class="card-body">
						<div class="mb-3">
							<textarea class="form-control" rows="3" placeholder="Add your notes here..." v-model="notes"></textarea>
						</div>
						<button class="btn btn-primary" type="button" @click="addNotes">
							<i class="bi bi-plus-circle"></i> Add Notes
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<script>
		const { createApp } = Vue;
		
		createApp({
			data() {
				return {
					expandedSections: {
						reqHeaders: false,
						resHeaders: false,
						reqBody: false,
						resBody: false
					},
					notes: ''
				}
			},
			methods: {
				toggleSection(section) {
					this.expandedSections[section] = !this.expandedSections[section];
				},
				goBack() {
					history.back();
				},
				copyAsCurl() {
					alert('Copy as cURL functionality will be implemented');
				},
				openInVSCode(section) {
					alert('Open in VS Code functionality will be implemented for: ' + section);
				},
				copyToClipboard(section) {
					// Get the content from the visible pre element
					const sectionElement = document.querySelector(`[data-section="${section}"]`);
					const visiblePre = sectionElement.querySelector('.content-preview pre, .content-expanded pre');
					const content = visiblePre ? visiblePre.textContent : '';
					
					navigator.clipboard.writeText(content).then(() => {
						const btn = event.target.closest('button');
						const originalHTML = btn.innerHTML;
						btn.innerHTML = '<i class="bi bi-check"></i>';
						btn.classList.add('btn-success');
						btn.classList.remove('btn-outline-secondary');
						setTimeout(() => {
							btn.innerHTML = originalHTML;
							btn.classList.remove('btn-success');
							btn.classList.add('btn-outline-secondary');
						}, 1000);
					});
				},
				addNotes() {
					alert('Add Notes functionality will be implemented. Notes: ' + this.notes);
				}
			}
		}).mount('#app');
	</script>
}
